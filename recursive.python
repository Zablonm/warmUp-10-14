def sum_of_n(n):
    if n <= 1:
        return n
    else:
        return n + sum_of_n(n - 1)


print(sum_of_n(5))  

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def preorder_traversal(node):
    if node is not None:
        print(node.value, end=' ')
        preorder_traversal(node.left)
        preorder_traversal(node.right)

root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
preorder_traversal(root) 

def postorder_traversal(node):
    if node is not None:
        postorder_traversal(node.left)
        postorder_traversal(node.right)
        print(node.value, end=' ')


postorder_traversal(root) 

#Discussion: When is recursion not the best choice for solving a problem?
#Some problems are more naturally expressed and easier to understand using iteration rather than recursion. 
#For example, simple loops for summing numbers or traversing arrays are typically more straightforward to 
#implement and debug iteratively.
